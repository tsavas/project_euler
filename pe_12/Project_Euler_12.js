// The sequence of triangle numbers is generated by adding the 
// natural numbers. So the 7th triangle number would be 
// 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28

// We can see that 28 is the first triangle number to have over 
// five divisors.

// What is the value of the first triangle number to have over 
// five hundred divisors?

// 1. 1 | 1
// 2, 3 | 1+2
// 3, 2

// i + everything before i


//right now you're taking a triangle number and recording factors in it
//instead you want to take a number and keep making triangle numbers
//until the factors.length equals the input number

//this works//

// const triangleFactors = function(int) {

//     var factors = [];
//     for (i = 1; i <= int; i++) {
//         if (int % i === 0) {

//             factors.push(i);
//         };
//     }
//     return factors;
// }

// const triangleSum = function(num) {

//     let sum = 0;
//     for (i = 1; i <= num; i++) {
//         sum += i;

//     }

//     // return sum;

//     return triangleFactors(sum);

// }

//this works//-------------------------
//this works//-------------------------

// if(factors.length === j){
//     return j;
// }


//sum is the answer

const factorLength = function(int) {

    let sum = 0;
    for (i = 1; i < Infinity; i++) { //change this
        sum += i;
        console.log("sum is",sum);


        // // return sum;

        // return triangleFactors(sum);

        let factors = [];
        for (j = 1; j <= sum; j++) {
            if (sum % j === 0) { //this is where the triangle number goes

                factors.push(j);
                console.log("j is",j);
            };

            if (factors.length === int) {
                // console.log("here is i",i);
                console.log("here are the factors",factors);
                return sum;
            }
        }
    }

}


// return factors;